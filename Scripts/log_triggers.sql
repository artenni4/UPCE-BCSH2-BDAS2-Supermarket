CREATE OR REPLACE TRIGGER DODAVATELE_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON DODAVATELE
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('DODAVATELE','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('DODAVATELE','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('DODAVATELE','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER DRUHY_ZBOZI_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON DRUHY_ZBOZI
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('DRUHY_ZBOZI','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('DRUHY_ZBOZI','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('DRUHY_ZBOZI','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER MERNE_JEDNOTKY_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON MERNE_JEDNOTKY
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('MERNE_JEDNOTKY','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('MERNE_JEDNOTKY','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('MERNE_JEDNOTKY','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER MISTA_ULOZENI_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON MISTA_ULOZENI
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('MISTA_ULOZENI','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('MISTA_ULOZENI','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('MISTA_ULOZENI','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER PLATBA_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON PLATBA
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PLATBA','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PLATBA','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PLATBA','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER POKLADNY_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON POKLADNY
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('POKLADNY','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('POKLADNY','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('POKLADNY','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER PRODANE_ZBOZI_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON PRODANE_ZBOZI
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PRODANE_ZBOZI','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PRODANE_ZBOZI','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PRODANE_ZBOZI','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER PRODAVANE_ZBOZI_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON PRODAVANE_ZBOZI
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PRODAVANE_ZBOZI','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PRODAVANE_ZBOZI','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PRODAVANE_ZBOZI','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER PRODEJE_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON PRODEJE
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PRODEJE','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PRODEJE','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('PRODEJE','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER REGIONY_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON REGIONY
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('REGIONY','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('REGIONY','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('REGIONY','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER ROLE_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON ROLE
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ROLE','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ROLE','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ROLE','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER ROLE_ZAMESTNANCU_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON ROLE_ZAMESTNANCU
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ROLE_ZAMESTNANCU','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ROLE_ZAMESTNANCU','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ROLE_ZAMESTNANCU','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER SOUBORY_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON SOUBORY
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('SOUBORY','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('SOUBORY','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('SOUBORY','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER SUPERMARKETY_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON SUPERMARKETY
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('SUPERMARKETY','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('SUPERMARKETY','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('SUPERMARKETY','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TYPY_PLACENI_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON TYPY_PLACENI
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('TYPY_PLACENI','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('TYPY_PLACENI','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('TYPY_PLACENI','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER ULOZENI_ZBOZI_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON ULOZENI_ZBOZI
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ULOZENI_ZBOZI','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ULOZENI_ZBOZI','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ULOZENI_ZBOZI','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER ZAMESTNANCI_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON ZAMESTNANCI
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ZAMESTNANCI','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ZAMESTNANCI','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ZAMESTNANCI','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER ZBOZI_LOG_DML BEFORE INSERT OR UPDATE OR DELETE ON ZBOZI
BEGIN
    IF INSERTING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ZBOZI','INSERT',SYSTIMESTAMP,USER);
    END IF;
    IF UPDATING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ZBOZI','UPDATE',SYSTIMESTAMP,USER);
    END IF;
    IF DELETING THEN
        INSERT INTO LOGY(tabulka,operace,cas,uzivatel) VALUES('ZBOZI','DELETE',SYSTIMESTAMP,USER);
    END IF;
END;
/
